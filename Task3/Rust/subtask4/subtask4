use std::fs::File;
use std::io::{self, BufRead, Write};
use std::path::Path;

fn generate_diamond(n: usize) -> Vec<String> {
    let mut lines = Vec::new();

    // Generate the top half of the diamond
    for i in 0..n {
        let spaces = " ".repeat(n - i - 1);
        let stars = "*".repeat(2 * i + 1);
        lines.push(format!("{}{}", spaces, stars));
    }

    // Generate the bottom half of the diamond
    for i in (0..n - 1).rev() {
        let spaces = " ".repeat(n - i - 1);
        let stars = "*".repeat(2 * i + 1);
        lines.push(format!("{}{}", spaces, stars));
    }

    lines
}

fn main() -> io::Result<()> {
    // Read the number from input.txt
    let input_path = Path::new("input.txt");
    let input_file = File::open(input_path)?;
    let mut reader = io::BufReader::new(input_file);

    let mut input = String::new();
    reader.read_line(&mut input)?;
    let n: usize = input.trim().parse().expect("Invalid number");

    // Generate the diamond pattern
    let diamond = generate_diamond(n);

    // Write the diamond pattern to output.txt
    let output_path = Path::new("output.txt");
    let mut output_file = File::create(output_path)?;

    for line in diamond {
        writeln!(output_file, "{}", line)?;
    }

    Ok(())
}
